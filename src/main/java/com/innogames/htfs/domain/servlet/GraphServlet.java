package com.innogames.htfs.domain.servlet;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.ws.rs.core.MediaType;

import org.apache.commons.codec.binary.Base64;
import org.eclipse.jetty.http.HttpHeaders;

import com.google.gson.Gson;
import com.innogames.htfs.domain.fs.FileSystemMonitor;
import com.innogames.htfs.domain.fs.HtfsFile;

public class GraphServlet extends HttpServlet {

	private static final long serialVersionUID = -4616223289878999924L;

	private final FileSystemMonitor fileSystemMonitor;

	public GraphServlet(FileSystemMonitor fileSystemMonitor) {
		this.fileSystemMonitor = fileSystemMonitor;
	}

	@Override
	protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		String accept = request.getHeader(HttpHeaders.ACCEPT);
		response.setStatus((accept != null && accept.contains(MediaType.APPLICATION_JSON)) ? this.doJson(request, response) : this.doHtml(request, response));
	}

	private int doHtml(HttpServletRequest request, HttpServletResponse response) throws IOException {
		response.setContentType(MediaType.TEXT_HTML);
		response.getWriter().print(new String(Base64.decodeBase64("PCFET0NUWVBFIGh0bWw+CjxodG1sPgo8aGVhZD4KCTxtZXRhIGNoYXJzZXQ9dXRmLTggLz4KCTx0aXRsZT5IVEZTIC0gRmlsZSBHcmFwaDwvdGl0bGU+Cgk8bGluayByZWw9InN0eWxlc2hlZXQiIGhyZWY9Imh0dHA6Ly9jb2RlLmpxdWVyeS5jb20vdWkvMS4xMC4xL3RoZW1lcy9iYXNlL2pxdWVyeS11aS5jc3MiPgoJPHNjcmlwdCBzcmM9Imh0dHA6Ly9jb2RlLmpxdWVyeS5jb20vanF1ZXJ5LTEuOS4xLmpzIj48L3NjcmlwdD4KCTxzY3JpcHQgc3JjPSJodHRwOi8vY29kZS5qcXVlcnkuY29tL3VpLzEuMTAuMS9qcXVlcnktdWkuanMiPjwvc2NyaXB0PgoKCTxzdHlsZSB0eXBlPSJ0ZXh0L2NzcyI+CgkJLnVpLXRvb2x0aXAgewoJCQlmb250LXNpemU6IDAuOGVtOwoJCX0KCTwvc3R5bGU+CjwvaGVhZD4KPGJvZHk+Cgk8aDEgY2xhc3M9InVpLXdpZGdldCIgc3R5bGU9Im1hcmdpbi1ib3R0b206IDBweDsiPkhURlMgLSBGaWxlIEdyYXBoPC9oMT4KCTxkaXYgaWQ9InN0YXRzIiBjbGFzcz0idWktd2lkZ2V0IiBzdHlsZT0iZm9udC1zaXplOiAwLjhlbTsgbWFyZ2luLWJvdHRvbTogMTRweDsiPlRyYWNraW5nIDAgZmlsZXM8L2Rpdj4KCTxzdmcgaWQ9InN2ZyI+PC9zdmc+Cgk8c2NyaXB0PgoJCSQoZG9jdW1lbnQpLnRvb2x0aXAoKTsKCgkJZnVuY3Rpb24gdXBkYXRlKCkgewoJCQkkLmFqYXgoewoJCQkJYXN5bmM6IGZhbHNlLAoJCQkJZGF0YVR5cGU6ICJqc29uIiwKCQkJCXVybDogJy8nLAoJCQkJc3VjY2VzczogZnVuY3Rpb24oZGF0YSkgewoJCQkJCWRhdGEuc29ydChmdW5jdGlvbihhLCBiKSB7CgkJCQkJCXJldHVybiBhLm5hbWUgPiBiLm5hbWUgPyAxIDogLTE7CgkJCQkJfSk7CgoJCQkJCWRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJzdGF0cyIpLmlubmVySFRNTCA9ICJUcmFja2luZyAiICsgZGF0YS5sZW5ndGggKyAiIGZpbGVzIjsKCQkJCQlkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgic3ZnIikuc2V0QXR0cmlidXRlKCJ3aWR0aCIsIGNvbHVtbnMgKiBzaXplICsgY29sdW1ucyAqIG1hcmdpbik7CgkJCQkJZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoInN2ZyIpLnNldEF0dHJpYnV0ZSgiaGVpZ2h0IiwgKE1hdGgubWF4KGRhdGEubGVuZ3RoL2NvbHVtbnMsIDEpICogc2l6ZSArIE1hdGgubWF4KGRhdGEubGVuZ3RoL2NvbHVtbnMsIDEpICogbWFyZ2luKSArIHNpemUgKyBtYXJnaW4pOwoKCQkJCQlmb3IodmFyIGkgPSAwOyBpIDwgZGF0YS5sZW5ndGg7IGkrKykgewoJCQkJCQl2YXIgaGFzaCA9IGRhdGFbaV1bJ2lkZW50aWZpZXInXTsKCgkJCQkJCWlmKGhpW2hhc2hdID09PSB1bmRlZmluZWQpIHsKCQkJCQkJCWhpW2hhc2hdID0gT2JqZWN0LmtleXMoaGkpLmxlbmd0aDsKCQkJCQkJfQoKCQkJCQkJdmFyIGogPSBoaVtoYXNoXTsKCgkJCQkJCXZhciB4ID0gaiAlIGNvbHVtbnM7CgkJCQkJCXZhciB5ID0gcGFyc2VJbnQoaiAvIGNvbHVtbnMpOwoKCQkJCQkJdmFyIHBvc1ggPSB4ICogc2l6ZSArIHggKiBtYXJnaW47CgkJCQkJCXZhciBwb3NZID0geSAqIHNpemUgKyB5ICogbWFyZ2luOwoJCQkJCQlhZGRCbG9jayhwb3NYLCBwb3NZLCBzaXplLCBoYXNoLCBkYXRhW2ldKTsKCQkJCQl9CgkJCQl9CgkJCX0pOwoKCQkJY2xlYW4oKTsKCQkJdGljaysrOwoJCX0KCgkJZnVuY3Rpb24gY2xlYW4oKSB7CgkJCSQoIi50aWNrIiArICh0aWNrLTEpKS5yZW1vdmUoKTsKCQl9CgoJCWZ1bmN0aW9uIGFkZEJsb2NrKHBvc1gsIHBvc1ksIHNpemUsIGhhc2gsIGZpbGUpIHsKCQkJdmFyIGJsb2NrID0gJCgiIyIgKyBoYXNoKVswXTsKCgkJCWlmKGJsb2NrID09PSB1bmRlZmluZWQpIHsKCQkJCXZhciBibG9jayA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUygiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmciLCAicmVjdCIpOwoJCQkJZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoInN2ZyIpLmFwcGVuZENoaWxkKGJsb2NrKTsKCgkJCQlibG9jay5zZXRBdHRyaWJ1dGVOUyhudWxsLCAiaWQiLCBoYXNoKTsKCQkJCWJsb2NrLnNldEF0dHJpYnV0ZU5TKG51bGwsICJ3aWR0aCIsIHNpemUpOwoJCQkJYmxvY2suc2V0QXR0cmlidXRlTlMobnVsbCwgImhlaWdodCIsIHNpemUpOwoJCQkJYmxvY2suc2V0QXR0cmlidXRlTlMobnVsbCwgIngiLCBwb3NYKTsKCQkJCWJsb2NrLnNldEF0dHJpYnV0ZU5TKG51bGwsICJ5IiwgcG9zWSk7CgkJCX0KCgkJCXZhciBoID0gZmlsZS5pbmNvbXBsZXRlX3dyaXRlX2ZhY3RvciA+PSBmaWxlLmNvbXBsZXRlX3dyaXRlX2ZhY3RvciA/IDIyNSA6IDEzMDsKCQkJdmFyIHMgPSBNYXRoLm1heChmaWxlLmluY29tcGxldGVfd3JpdGVfZmFjdG9yLCBmaWxlLmNvbXBsZXRlX3dyaXRlX2ZhY3RvcikgKiAxMDA7CgkJCXZhciBsID0gNTU7CgoJCQlibG9jay5zZXRBdHRyaWJ1dGVOUyhudWxsLCAic3R5bGUiLCAiZmlsbDogaHNsKCIgKyBoICsgIiwgIiArIHMgKyAiJSwgIiArIGwgKyAiJSk7Iik7CgkJCWJsb2NrLnNldEF0dHJpYnV0ZU5TKG51bGwsICJjbGFzcyIsICJ0aWNrIiArIHRpY2spOwoJCQlibG9jay5zZXRBdHRyaWJ1dGVOUyhudWxsLCAidGl0bGUiLCBnZW5lcmF0ZVRpdGxlKGZpbGUpKTsKCQl9CgoJCWZ1bmN0aW9uIGdlbmVyYXRlVGl0bGUoZmlsZSkgewoJCQlyZXR1cm4gZmlsZS5uYW1lICsgIiAoIiArIHBhcnNlSW50KGZpbGUuc2l6ZSkvMTAyNCArICJrYiwgbW9kaWZpZWQgIiArIGZpbGUuc2Vjb25kc19zaW5jZV9sYXN0X21vZGlmaWVkICsgInMgYWdvKSI7CgkJfQoKCQlmdW5jdGlvbiBnZXRQYXJhbWV0ZXJCeU5hbWUobmFtZSwgZGVmKSB7CgkJCXZhciByZWdleCA9IG5ldyBSZWdFeHAoIltcXD8mXSIgKyBuYW1lLnJlcGxhY2UoL1tcW10vLCAiXFxcWyIpLnJlcGxhY2UoL1tcXV0vLCAiXFxcXSIpICsgIj0oW14mI10qKSIpOwoJCQl2YXIgcmVzdWx0cyA9IHJlZ2V4LmV4ZWMod2luZG93LmxvY2F0aW9uLnNlYXJjaCk7CgkJCWlmKHJlc3VsdHMgPT0gbnVsbCkgewoJCQkJcmV0dXJuIGRlZjsKCQkJfQoKCQkJcmV0dXJuIGRlY29kZVVSSUNvbXBvbmVudChyZXN1bHRzWzFdLnJlcGxhY2UoL1wrL2csICIgIikpOwoJCX0KCgoJCXZhciBjb2x1bW5zID0gcGFyc2VJbnQoZ2V0UGFyYW1ldGVyQnlOYW1lKCJjb2x1bW5zIiwgMzApKTsKCQl2YXIgc2l6ZSA9IHBhcnNlSW50KGdldFBhcmFtZXRlckJ5TmFtZSgic2l6ZSIsIDQwKSk7CgkJdmFyIG1hcmdpbiA9IHBhcnNlSW50KGdldFBhcmFtZXRlckJ5TmFtZSgibWFyZ2luIiwgNCkpOwoJCXZhciB0aWNrID0gMDsKCQl2YXIgaGkgPSB7fTsKCgkJY29uc29sZS5sb2coKTsKCgkJc2V0SW50ZXJ2YWwodXBkYXRlLCA1MDApOwoJPC9zY3JpcHQ+CjwvYm9keT4KPC9odG1sPg==")));
		return HttpServletResponse.SC_OK;
	}

	private int doJson(HttpServletRequest request, HttpServletResponse response) throws IOException {
		response.setContentType(MediaType.APPLICATION_JSON);

		List<Map<String, String>> files = new ArrayList<Map<String, String>>();

		for (HtfsFile file : this.fileSystemMonitor.getHtfsFiles()) {
			files.add((file.toMap()));
		}

		response.getWriter().print((new Gson()).toJson(files));
		return HttpServletResponse.SC_OK;
	}

}
